import asyncio
import logging
from telethon import TelegramClient, events
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

# üîπ –î–∞–Ω–Ω—ã–µ Telegram API (–ø–æ–ª—É—á–∏—Ç—å –Ω–∞ https://my.telegram.org/apps)
API_ID = 27771899  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π API_ID
API_HASH = "79a67124f8aa60638bc5bb4b8e650027"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π API_HASH
PHONE_NUMBER = "+79263676550"  # –¢–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

# üîπ –î–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞
BOT_TOKEN = "7824768301:AAGfUdrjnWNFrg5n3p7eIpN7CYAszQHpqRU"

# üîπ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤ (ID –∏–ª–∏ username)
MONITORED_CHATS = [
    -1002005877458, -1001099860397, -1001211876896,
    -1001498653424, -1002409669849, -1001202159807, -1001581728407
]

# üîπ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
KEYWORDS = {"—Ä—É–±–ª", "–≥–æ—Å–¥—É–º", "—Ç—Ä–∞–º–ø", "–ø—É—Ç–∏–Ω", "–≤–≤–µ–ª", "–≤–ª–∞—Å—Ç", "–†–æ—Å—Å–∏—è"}

# üîπ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É
SUPPORT_CHAT_LINK = "https://t.me/suvorov_danila"

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üîπ –°–æ–∑–¥–∞–µ–º Telethon-–∫–ª–∏–µ–Ω—Ç (—Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
client = TelegramClient("user_session", API_ID, API_HASH)

# üîπ –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ Aiogram
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# üîπ –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
subscribed_users = set()

async def get_chat_names():
    """ –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã """
    chat_names = []
    for chat_id in MONITORED_CHATS:
        try:
            chat = await client.get_entity(chat_id)
            chat_link = f"https://t.me/{chat.username}" if getattr(chat, 'username', None) else "–Ω–µ—Ç —Å—Å—ã–ª–∫–∏"
            chat_names.append(f"{chat.title} ({chat_link})")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞ {chat_id}: {str(e)}")
            chat_names.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è {chat_id}")
    return chat_names

@dp.message(CommandStart())
async def start(message: Message):
    """ –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ """
    user_id = message.from_user.id
    subscribed_users.add(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫

    chat_names = await get_chat_names()
    chat_list = "\n".join(chat_names)
    keywords_list = ", ".join(KEYWORDS)

    response = (f"‚úÖ <b>–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!</b>\n\n"
                f"üì¢ <b>–ú–æ–Ω–∏—Ç–æ—Ä—è—Ç—Å—è —á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã:</b>\n{chat_list}\n\n"
                f"üîç <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {keywords_list}")

    # üîπ Reply-–∫–Ω–æ–ø–∫–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")]],
        resize_keyboard=True
    )

    await message.answer(response, reply_markup=keyboard, parse_mode="HTML")

@dp.message(lambda message: message.text == "üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: Message):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É """
    await message.answer(f"–î–ª—è —Å–≤—è–∑–∏ —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {SUPPORT_CHAT_LINK}")

@client.on(events.NewMessage(chats=MONITORED_CHATS))
async def monitor_messages(event):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö —á–∞—Ç–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º """
    message_text = event.message.text.lower() if event.message.text else ""
    if any(keyword in message_text for keyword in KEYWORDS):
        sender = await event.get_sender()
        chat = await event.get_chat()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if event.is_channel:
            message_link = f"https://t.me/{chat.username}/{event.message.id}" if chat.username else f"https://t.me/c/{chat.id}/{event.message.id}"
            source_info = f"üì¢ –ö–∞–Ω–∞–ª: <b>{chat.title}</b>\n<a href='{message_link}'>–û—Ç–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</a>\n"
        else:
            sender_name = f"{sender.first_name} {sender.last_name or ''}".strip()
            sender_username = f"(@{sender.username})" if sender.username else ""
            message_link = f"https://t.me/{chat.username}/{event.message.id}" if chat.username else "–Ω–µ—Ç —Å—Å—ã–ª–∫–∏"
            source_info = f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: <b>{sender_name}</b> {sender_username}\n<a href='{message_link}'>–û—Ç–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</a>\n"

        alert_text = f"üîç <b>–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ!</b>\n\n{source_info}\n{event.message.text}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –í–°–ï–ú –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for user_id in subscribed_users:
            try:
                await bot.send_message(user_id, alert_text, parse_mode="HTML")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def main():
    """ –ó–∞–ø—É—Å–∫ Telethon-–∫–ª–∏–µ–Ω—Ç–∞ –∏ –±–æ—Ç–∞ """
    await client.start(PHONE_NUMBER)  # –í—Ö–æ–¥ —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await dp.start_polling(bot)
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())

